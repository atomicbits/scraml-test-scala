
/:
  get:
    queryParameters:
      age?:
        description: The age of the user.
        type: number
      firstName?:
        description: The firstname of the user.
        type: string
      lastName?:
        description: The last name of the user.
        type: string
      organization[]:
        description: |
          The organization of the user. The [] at the end of the parameter name is a meaningless literal that is maintained in the API.
        type: string[]
      hobbies?:
        description: The hobbies are an optional repeated query parameter
        type: string[]
      b-day?:
        type: birthday
        description: ToDo - rename b-day to birthday and find out why we get a cyclic reference exception
    responses:
      200:
        body:
          application/vnd-v1.0+json:
            schema: |
              {
                "type": "array",
                "items": {
                  "$ref": "http://atomicbits.io/raml10/user.json"
                }
              }
      412:
        description: PreCondition Failed
        body:
          application/vnd-v1.0+json:
            schema: error


/up-load:
  post:
    body:
      multipart/form-data:
    responses:
      200:
        body:

/tree:
  get:
    responses:
      200:
        body:
          application/vnd-v1.0+json:
            schema: tree

/{userid}:
  get:
    queryParameters:
      age:
        description: The age of the user.
        type: number
      firstName:
        description: The firstname of the user.
        type: string
      lastName:
        description: The last name of the user.
        type: string
    responses:
      200:
        body:
          application/vnd-v1.0+json:
            schema: user
          application/vnd-v0.1+json:
            schema: animal
  post:
    body:
      application/x-www-form-urlencoded:
        formParameters:
          text:
            description: Text to post as a comment on the user.
            type: string
            required: true
          value:
            description: Value to give to a user.
            type: integer
            required: false
    responses:
      200:
        body:
  delete:
    responses:
      200:
        body:
          application/vnd-v1.0+json:
  put:
    body:
      application/vnd-v1.0+json:
        schema: user
      application/vnd-v0.1+json:
        schema: animal
    responses:
      200:
        body:
          application/vnd-v1.0+json:
            schema: link


/{userid}/dogs:
  uriParameters:
    userid:
      description: The user's id.
      type: string
      required: true
  get:
    responses:
      200:
        body:
          application/vnd-v1.0+json:
            schema: |
              {
                "$ref": "http://atomicbits.io/raml10/paged-list.json#",
                "genericTypes": [
                  {
                    "$ref": "http://atomicbits.io/raml10/dog.json"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
  post:
    body:
      application/vnd-v1.0+json:
        schema: |
          {
            "$ref": "http://atomicbits.io/raml10/dog.json"
          }
    responses:
      201:

#  description: todo support for anonymous schema id's for non-object schema's, List[] support in body and result directly
#  description: todo testing primitives as request & response bodies

/activate:
  put:
    body:
      application/vnd-v1.0+json:
        schema: |
          {
            "type": "array",
            "items": {
              "$ref": "http://atomicbits.io/raml10/user.json"
            }
          }
    responses:
      200:
        body:
          application/vnd-v1.0+json:
            schema: |
              {
                "type": "array",
                "items": {
                  "$ref": "http://atomicbits.io/raml10/user.json"
                }
              }
  post:
    is: [error404]
    body:
      application/json;charset=utf-8:
         schema: |
           {
             "type": "array",
             "items": {
               "$ref": "http://atomicbits.io/raml10/user.json"
             }
           }
    responses:
      204:
        body:

/{userid}/location:
  uriParameters:
    userid:
      description: The user's id.
      type: string
      required: true
  get:
    responses:
      200:
        body:
          application/vnd-v1.0+json:
            schema: geometry

/test:
  get:
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema#",
            "id": "http://gurumeditator.io/schema/my-object.json",
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "id": "http://gurumeditator.io/schema/my-other-object.json",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "required": true
                    },
                    "typeName": {
                      "type": "string",
                      "required": true
                    },
                    "placeList": {
                      "type": "string",
                      "required": true
                    }
                  }
                }
              }
            }
          }

/inlinetype:
  get:
    body:
      application/json:
        properties:
          name:
            type: string
          magickey:
            type: integer

/formurlencodedtype:
  post:
    body:
      application/x-www-form-urlencoded:
        type: SimpleForm
    responses:
      200:
        body:

/typedquerystring:
  get:
    queryString:
      type: SimpleForm
    responses:
      200:
        body:
